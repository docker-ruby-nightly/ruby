name: Docker Build

on:
  workflow_dispatch:
    inputs:
      push:
        type: boolean
        default: false
        description: Push the images after build
  schedule:
    - cron: 0 20 * * *

permissions:
  contents: write
  packages: write

env:
  REGISTRY_IMAGE: ghcr.io/docker-ruby-nightly/ruby

jobs:
  set-up-matrix:
    name: Set up matrix
    runs-on: ubuntu-22.04
    outputs:
      date: ${{ steps.fetch-date.outputs.date }}
      images: ${{ steps.fetch-matrix.outputs.images }}
      variants: ${{ steps.fetch-variants.outputs.variants }}
      json: ${{ steps.fetch-json.outputs.json }}
      revision: ${{ steps.fetch-revision.outputs.revision }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Download source
        run: curl -o ruby.tar.xz https://cache.ruby-lang.org/pub/ruby/snapshot/snapshot-master.tar.xz
      - uses: actions/upload-artifact@v4
        with:
          name: snapshot-master
          path: ruby.tar.xz
          retention-days: 1

      - id: fetch-variants
        run: echo "variants=$(./variants.rb)" >> "$GITHUB_OUTPUT"
      - id: fetch-json
        run: echo "json=$(./nightly-versions.rb)" >> "$GITHUB_OUTPUT"
      - id: fetch-date
        run: echo "date=$(jq -r .master.date docker-ruby/versions.json)" >> $GITHUB_OUTPUT
      - id: fetch-revision
        run: echo revision=$(tar -xf ruby.tar.xz snapshot-master/revision.h -O | grep -oP '(?<=RUBY_REVISION ")(.*)(?=")') >> $GITHUB_OUTPUT
      - run: cd docker-ruby && ./apply-templates.sh

      - id: fetch-matrix
        run: echo "images=$(./images.rb)" >> "$GITHUB_OUTPUT"


  build:
    needs: set-up-matrix
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.set-up-matrix.outputs.images) }}
    name: ${{ matrix.image.variant }} - ${{ matrix.image.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: echo '${{ needs.set-up-matrix.outputs.json }}' > docker-ruby/versions.json
      - run: cd docker-ruby && git apply ../Dockerfile.template.patch
      - run: cd docker-ruby && ./apply-templates.sh

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            ${{ matrix.image.variant }}-nightly-${{ needs.set-up-matrix.outputs.date }}
            ${{ matrix.image.variant }}-nightly

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - uses: actions/download-artifact@v4
        with:
          name: snapshot-master
          path: ./docker-ruby/master/${{ matrix.image.variant }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./docker-ruby/master/${{ matrix.image.variant }}
          platforms: ${{ matrix.image.platform }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      # linux/amd64 => linux-amd64
      - if: success() || failure()
        run: |
          platform=${{ matrix.image.platform }}
          platform_safe=${platform//\//-}
          echo "platform_safe=$platform_safe" >> $GITHUB_ENV
          echo "${{ steps.build.outcome == 'success' && '✅' || '❌' }} ${{ matrix.image.variant }}-$platform_safe" > outcome-${{ matrix.image.variant }}-$platform_safe.txt

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.image.variant }}-${{ env.platform_safe }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Upload outcome
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: outcome-${{ matrix.image.variant }}-${{ env.platform_safe }}
          path: outcome-${{ matrix.image.variant }}-${{ env.platform_safe }}.txt
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-22.04
    needs:
      - build
      - set-up-matrix
    if: success() || failure()

    strategy:
      fail-fast: false
      matrix:
        variant: ${{ fromJson(needs.set-up-matrix.outputs.variants) }}
    name: Merge - ${{ matrix.variant }}

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.variant }}-*
          merge-multiple: true

      - name: Create folder if not exists
        run: mkdir -p /tmp/digests
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            ${{ matrix.variant }}-nightly-${{ needs.set-up-matrix.outputs.date }}
            ${{ matrix.variant }}-nightly

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Create manifest list and push
        if: github.event_name == 'schedule' || inputs.push == true
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

  release:
    runs-on: ubuntu-22.04
    needs:
      - set-up-matrix
      - build
      - merge
    if: success() || failure()

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@v4
        with:
          name: snapshot-master
      - uses: actions/download-artifact@v4
        with:
          path: outcome
          pattern: outcome-*
          merge-multiple: true

      - name: Create release notes
        run: |
          echo "Build from [${{ needs.set-up-matrix.outputs.revision }}](https://github.com/ruby/ruby/tree/${{ needs.set-up-matrix.outputs.revision }})" > notes.txt
          echo "" >> notes.txt
          cat $(find outcome/* | sort) >> notes.txt
          echo "" >> notes.txt
          echo "https://github.com/docker-ruby-nightly/ruby/pkgs/container/ruby/versions?filters[version_type]=tagged" >> notes.txt

      - id: latest-release
        env:
          GH_TOKEN: ${{ github.token }}
        run: echo "latest_release=$(gh release list --limit 1 --json name --jq '.[].name')" >> $GITHUB_OUTPUT

      - name: Create release
        # https://github.com/ruby/actions/actions/workflows/snapshot-master.yml
        if: (github.event_name == 'schedule' || inputs.push == true) && steps.latest-release.outputs.latest_release != needs.set-up-matrix.outputs.date
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create ${{ needs.set-up-matrix.outputs.date }} ruby.tar.xz --title="${{ needs.set-up-matrix.outputs.date }}" --notes-file=notes.txt
